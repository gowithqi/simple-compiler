######################################################
# Parser
######################################################

<Program>
    ::= <FunctionExpr>*

<FunctionExpr>
    ::= <PrototypeExpr> ';'         // Function declaration
      | <PrototypeExpr> <Expr> ';'  // Function definition

<PrototypeExpr>
    ::= <TypeExpr> IDENTIFIER '(' (<TypeExpr> IDENTIFIER)* ')'

<TypeExpr>
    ::= INT

<Expr>
    ::= <PrimaryExpr> <BinopRhsExpr>

<BinopRhsExpr>
    ::= (<Binop> <PrimaryExpr>)*

<Binop>
    ::= '+'     // Priority 20 (low)
      | '-'     // Priority 20
      | '*'     // Priority 40
      | '/'     // Priority 40 (high)

<PrimaryExpr>
    ::= <ParentExpr>
      | <IdentifierExpr>
      | NUMBER

<ParentExpr>
    ::= '(' <Expr> ')'

<IdentifierExpr>
    ::= IDENTIFIER                    // Variable
      | IDENTIFIER '(' <Expr>* ')'    // Function call

######################################################
# Lexer
######################################################

NUMBER      ::= [0-9]+
IDENTIFIER  ::= [a-zA-z_][a-zA-Z_0-9]*
INT         ::= 'int'

